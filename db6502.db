--
-- PostgreSQL database dump
--

-- Dumped from database version 10.10 (Ubuntu 10.10-0ubuntu0.18.04.1)
-- Dumped by pg_dump version 10.10 (Ubuntu 10.10-0ubuntu0.18.04.1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: detailed_instructions; Type: TABLE; Schema: public; Owner: lannri01
--

CREATE TABLE public.detailed_instructions (
    mnemonic character varying(3),
    addressing_mode character varying(6),
    opcode character varying(3),
    length integer,
    "time" integer,
    page_boundary_increase boolean
);


ALTER TABLE public.detailed_instructions OWNER TO lannri01;

--
-- Name: facts; Type: TABLE; Schema: public; Owner: lannri01
--

CREATE TABLE public.facts (
    id integer NOT NULL,
    fact character varying(1024) NOT NULL
);


ALTER TABLE public.facts OWNER TO lannri01;

--
-- Name: facts_id_seq; Type: SEQUENCE; Schema: public; Owner: lannri01
--

CREATE SEQUENCE public.facts_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.facts_id_seq OWNER TO lannri01;

--
-- Name: facts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: lannri01
--

ALTER SEQUENCE public.facts_id_seq OWNED BY public.facts.id;


--
-- Name: flags; Type: TABLE; Schema: public; Owner: lannri01
--

CREATE TABLE public.flags (
    flag character(1) NOT NULL,
    name character varying(24) NOT NULL,
    description character varying(256) NOT NULL
);


ALTER TABLE public.flags OWNER TO lannri01;

--
-- Name: instructions_general; Type: TABLE; Schema: public; Owner: lannri01
--

CREATE TABLE public.instructions_general (
    mnemonic character varying(3) NOT NULL,
    name character varying(128) NOT NULL,
    description character varying(1024) NOT NULL,
    flags character varying(16) NOT NULL
);


ALTER TABLE public.instructions_general OWNER TO lannri01;

--
-- Name: facts id; Type: DEFAULT; Schema: public; Owner: lannri01
--

ALTER TABLE ONLY public.facts ALTER COLUMN id SET DEFAULT nextval('public.facts_id_seq'::regclass);


--
-- Data for Name: detailed_instructions; Type: TABLE DATA; Schema: public; Owner: lannri01
--

COPY public.detailed_instructions (mnemonic, addressing_mode, opcode, length, "time", page_boundary_increase) FROM stdin;
ADC	imm	$69	2	2	f
ADC	zp	$65	2	3	f
ADC	zp,x	$75	2	4	f
ADC	abs	$6D	3	4	f
ADC	abs,x	$7D	3	4	t
ADC	abs,y	$79	3	4	t
ADC	ind,x	$61	2	6	f
ADC	ind,y	$71	2	5	t
AND	imm	$29	2	2	f
AND	zp	25	2	3	f
AND	zp,x	$35	2	4	f
AND	abs	$2D	3	4	f
AND	abs,x	$3D	3	4	t
AND	abs,y	$39	3	4	t
AND	ind,x	$21	2	6	f
AND	ind,y	$31	2	5	t
ASL	a	$0A	1	2	f
ASL	zp	$06	2	5	f
ASL	zp,x	$16	2	6	f
ASL	abs	$0E	3	6	f
ASL	abs,x	$1E	3	7	f
BIT	zp	$24	2	3	f
BIT	abs	$2C	3	4	f
BPL	rel	$10	2	2	t
BMI	rel	$30	2	2	t
BVC	rel	$50	2	3	f
BVS	rel	$70	2	2	t
BCC	rel	$90	2	2	t
BCS	rel	$B0	2	2	t
BNE	rel	$D0	2	2	t
BEQ	rel	$F0	2	2	t
BRK	impl	$00	1	7	f
CMP	imm	$C9	2	2	f
CMP	zp	$C5	2	3	f
CMP	zp,x	$D5	2	4	f
CMP	abs	$CD	3	4	f
CMP	abs,x	$DD	3	4	t
CMP	abs,y	$D9	3	4	t
CMP	ind,x	$C1	2	6	f
CMP	ind,y	$D1	2	5	t
CPX	imm	$E0	2	2	f
CPX	zp	$E4	2	3	f
CPX	abs	$EC	3	4	f
CPY	imm	$C0	2	2	f
CPY	zp	$C4	2	3	f
CPY	abs	$CC	3	4	f
DEC	zp	$C6	2	5	f
DEC	zp,x	$D6	2	6	f
DEC	abs	$CE	3	6	f
DEC	abs,x	$DE	3	7	f
EOR	imm	$49	2	2	f
EOR	zp	$45	2	3	f
EOR	zp,x	$55	2	4	f
EOR	abs	$4D	3	4	f
EOR	abs,x	$5D	3	4	t
EOR	abs,y	$59	3	4	t
EOR	ind,x	$41	2	6	f
EOR	ind,y	$51	2	5	t
CLC	impl	$18	1	2	f
SEC	impl	$38	1	2	f
CLI	impl	$58	1	2	f
SEI	impl	$78	1	2	f
CLV	impl	$B8	1	2	f
CLD	impl	$D8	1	2	f
SED	impl	$F8	1	2	f
INC	zp	$E6	2	5	f
INC	zp,x	$F6	2	6	f
INC	abs	$EE	3	6	f
INC	abs,x	$FE	3	7	f
JMP	abs	$4C	3	3	f
JMP	ind	$6C	3	5	f
JSR	abs	$20	3	6	f
LDA	imm	$A9	2	2	f
LDA	zp	$A5	2	3	f
LDA	zp,x	$B5	2	4	f
LDA	abs	$AD	3	4	f
LDA	abs,x	$BD	3	4	t
LDA	abs,y	$B9	3	4	t
LDA	ind,x	$A1	2	6	f
LDA	ind,y	$B1	2	5	t
LDX	imm	$A2	2	2	f
LDX	zp	$A6	2	3	f
LDX	zp,y	$B6	2	4	f
LDX	abs	$AE	3	4	f
LDX	abs,y	$BE	3	4	t
LDY	imm	$A0	2	2	f
LDY	zp	$A4	2	3	f
LDY	zp,x	$B4	2	4	f
LDY	abs	$AC	3	4	f
LDY	abs,x	$BC	3	4	t
LSR	a	$4A	1	2	f
LSR	zp	$46	2	5	f
LSR	zp,x	$56	2	6	f
LSR	abs	$4E	3	6	f
LSR	abs,x	$5E	3	7	f
NOP	impl	$EA	1	2	f
ORA	imm	$09	2	2	f
ORA	zp	$05	2	3	f
ORA	zp,x	15	2	4	f
ORA	abs	$0D	3	4	f
ORA	abs,x	$1D	3	4	t
ORA	abs,y	$19	3	4	t
ORA	ind,x	$01	2	6	f
ORA	ind,y	$11	2	5	t
TAX	impl	$AA	1	2	f
TXA	impl	$8A	1	2	f
DEX	impl	$CA	1	2	f
INX	impl	$E8	1	2	f
TAY	impl	$A8	1	2	f
TYA	impl	$98	1	2	f
DEY	impl	$88	1	2	f
INY	impl	$C8	1	2	f
ROL	a	$2A	1	2	f
ROL	zp	26	2	5	f
ROL	zp,x	$36	2	6	f
ROL	abs	$2E	3	6	f
ROL	abs,x	$3E	3	7	f
ROR	a	$6A	1	2	f
ROR	zp	66	2	5	f
ROR	zp,x	$76	2	6	f
ROR	abs	$6E	3	6	f
ROR	abs,x	$7E	3	7	f
RTI	impl	$40	1	6	f
RTS	impl	$60	1	6	f
SBC	imm	$E9	2	2	f
SBC	zp	$E5	2	3	f
SBC	zp,x	$F5	2	4	f
SBC	abs	$ED	3	4	f
SBC	abs,x	$FD	3	4	t
SBC	abs,y	$F9	3	4	t
SBC	ind,x	$E1	2	6	f
SBC	ind,y	$F1	2	5	t
STA	zp	$85	2	3	f
STA	zp,x	$95	2	4	f
STA	abs	$8D	3	4	f
STA	abs,x	$9D	3	5	f
STA	abs,y	$99	3	5	f
STA	ind,x	$81	2	6	f
STA	ind,y	$91	2	6	f
TXS	impl	$9A	1	2	f
TSX	impl	$BA	1	2	f
PHA	impl	$48	1	3	f
PLA	impl	$68	1	4	f
PHP	impl	$08	1	3	f
PLP	impl	$28	1	4	f
STX	zp	$86	2	3	f
STX	zp,y	$96	2	4	f
STX	abs	$8E	3	4	f
STY	zp	$84	2	3	f
STY	zp,x	$94	2	4	f
STY	abs	$8C	3	4	f
\.


--
-- Data for Name: facts; Type: TABLE DATA; Schema: public; Owner: lannri01
--

COPY public.facts (id, fact) FROM stdin;
1	The 6502 was first released in 1975
2	When released, the 6502 was the least expensive processor on the market
3	The processor is considered responsible for the home computer revolution of the 1980s
4	A modified form of the 6502 was used in the NES, Apple II, and BBC Micro
5	The 6502 is still widely used today -- hundreds of millions are still being produced for use in embedded systems
6	The processor's max clock rate ranges from 1MHz to 3MHz, about 1,000 times slower than many of the processors in modern laptops
7	Compared to other processors of the time, the 6502 has very few registers -- a measely 3 general-purpose registers compared with the Z80's 8
8	The original design included 3,218 transistors. By comparison, an Intel i7 processor can have upwards of 2 billion
9	The 6502 has an 8-bit data size, meaning its registers can handle values in the range 0-255
10	The 6502 has a 16-bit address bus, allowing it to address 65,536 bytes (64k) of data
11	You can still purchase 6502 CPUs from Western Design Center -- they cost about $6 USD apiece
\.


--
-- Data for Name: flags; Type: TABLE DATA; Schema: public; Owner: lannri01
--

COPY public.flags (flag, name, description) FROM stdin;
N	Negative	Set when the result of the last instruction was negative (>= $80)
Z	Zero	Set when the result of the last instruction was 0. Also used to check equality (result is equal when Z = 1)
V	Overflow	Set when the result of a signed mathematical operation does not fit into 8 bits (i.e. result is outside the range -128 to 127). Also set by the BIT instruction based on the value at the tested address
B	Break	Set when an interrupt is triggered by the BRK instruction; this can help determine whether an interrupt was triggered by hardware (B is 0) or software (B is 1); note that it only affects the pushed value, and this bit is ignored on the PLP instruction
D	Decimal	Indicates whether the CPU is operating using binary-coded-decimal
I	Interrupt disable	When set, disables maskable interrupts (IRQs). This is automatically set when an interrupt occurs, and can be manually set and cleared with the SEI and CLI instructions, respectively
C	Carry	Indicates whether the result of a mathematical operation was outside the range 0 to 255, enabling 16-bit arithmetic. This flag is also set by comparisons when the right-hand value is greater than or equal to the left-hand value
\.


--
-- Data for Name: instructions_general; Type: TABLE DATA; Schema: public; Owner: lannri01
--

COPY public.instructions_general (mnemonic, name, description, flags) FROM stdin;
ADC	ADd with Carry	ADC results are dependant on the setting of the decimal flag. In decimal mode, addition is carried out on the assumption that the values involved are packed BCD (Binary Coded Decimal). There is no way to add without carry	N, Z, C, V
AND	Bitwise AND	Performs bitwise AND with the accumulator; the result is stored in the accumulator	N, Z
ASL	Arithmetic Shift Left	Shifts all bits left one position. 0 is shifted into bit 0 and the original bit 7 is shifted into the Carry	N, Z, C
BIT	test BITs	BIT sets the Z flag as though the value in the address tested were ANDed with the accumulator. The S and V flags are set to match bits 7 and 6 respectively in the value stored at the tested address	N, V, Z
BPL	Branch on PLus	Branches if the N flag is clear	none
BMI	Branch on MInus	Branches if the N flag is set	none
BVC	Branch on oVerflow Clear	Branches if the V flag is clear	none
BVS	Branch on oVerflow Set	Branches if the V flag is set	none
BCC	Branch on Carry Clear	Branches if the C flag is clear. This is often used in a less-than comparison	none
BCS	Branch on Carry Set	Branches if the C flag is set. This is often used in a greater-than or greater-or-equal comparison	none
BNE	Branch on Not Equal	Branches if the Z flag is clear (result of not equal)	none
BEQ	Branch on EQual	Branches if the Z flag is set(result of equal)	none
BRK	BReaK	Force break; causes a maskable interrupt	B
CMP	CoMPare accumulator	Compares the accumulator with some value. If the value in the accumulator is equal or greater than the compared value, C will be set. The Z and N flags will be set on equality or lack thereof and the sign of the accumulator (i.e. Z is set if equal; N is set if A >= $80)	N, Z, C
CPX	ComPare X register	Operation and flags identical to the CMP instruction (but compares X with the value)	N, Z, C
CPY	ComPare Y register	Operation and flags identical to the CMP instruction (but compares Y with the value)	N, Z, C
DEC	DECrement memory	Decrements the value at the specified location by 1. $00 rolls over to $FF. Sets N and Z based on the result of the operation	N, Z
EOR	bitwise Exclusive OR	Performs XOR between the accumulator and some value. Sets N and Z based on the result	N, Z
CLC	CLear Carry	Clears the carry bit	C
SEC	SEt Carry	Sets the carry bit	C
CLI	CLear Interrupt	Clears the interrupt disable flag (i.e. allows interrupts)	I
SEI	SEt Interupt	Sets the interrupt disable flag (i.e. prevents interrupts)	I
CLV	CLear oVerflow	Clears the V flag	V
CLD	CLear Decimal	Clears the decimal mode flag (disables binary-coded decimal)	D
SED	SEt Decimal	Sets the decimal mode flag (enables binary-coded decimal)	D
INC	INCrement memory	Increments the value at the specified address by 1. $FF rolls over to $00. Sets N and Z flags based on the result	N, Z
JMP	JuMP	Transfers program execution to the address specified by the instruction. Note that an indirect jump must never use a vector beginning on the last byte of a page, as this will cause the address to get decoded incorrectly	none
JSR	Jump to SubRoutine	Pushes the address of the next instruction - 1 to the stack before transfering program control to the address indicated. Normally complemented by an RTS instruction	none
LDA	LoaD A	Loads the A register with the specified value	N, Z
LDX	LoaD X	Loads the X register with the specified value	N, Z
LDY	LoaD Y	Loads the Y register with the specified value	N, Z
LSR	Logical Shift Right	Shifts all bits right one position. 0 is shifted into bit 7 and the original bit 0 is shifted into the Carry	N, Z, C
NOP	No OPeration	Does nothing; skipped over. Typically used to reserve space for future modifications or ignore sections of memory	none
ORA	bitwise OR with Accumulator	Performs bitwise or with the accumulator, storing the result in the accumulator	N, Z
TAX	Transfer A to X	Transfers the value in A to X	N, Z
TXA	Transfer X to A	Tranfsers the value in X to A	N, Z
DEX	DEcrement X	Decrement the value in the X register by one, setting the N and Z flags based on the result	N, Z
INX	INcrement X	Increment the value in the X register by one, setting the N and Z flags based on the result	N, Z
TAY	Transfer A to Y	Transfers the value in A to Y	N, Z
TYA	Transfer Y to A	Transfers the value in Y to A	N, Z
DEY	DEcrement Y	Decrement the value in the Y register by one, setting the N and Z flags based on the result	N, Z
INY	INcrement Y	Increment the value in the Y register by one, setting the N and Z flags based on the result	N, Z
ROL	ROtate Left	Shifts all bits left one position. The Carry is shifted into bit 0 and the original bit 7 is shifted into the Carry	N, Z, C
ROR	ROtate Right	Shifts all bits right one position. The Carry is shifted into bit 7 and the original bit 0 is shifted into the Carry	N, Z, C
RTI	ReTurn from Interrupt	RTI retrieves the processor status and the program counter from the stack in that order. Note that the address retrieved is the actual address, unlike JSR and RTS where the address pushed is the return address - 1	all
RTS	ReTurn from Subroutine	RTS retrieves the return address - 1 from the stack and transfers control to that address + 1	none
SBC	SuBtract with Carry	SBC results are dependant on the setting of the decimal flag. In decimal mode, subtraction is carried out on the assumption that the values involved are packed BCD (Binary Coded Decimal). There is no way to subtract without the carry which works as an inverse borrow. i.e, to subtract you set the carry before the operation. If the carry is cleared by the operation, it indicates a borrow occurred	N, V, Z, C
STA	STore Accumulator	Stores the value in the A register at the specified memory location	none
STX	STore X register	Stores the value in the X register at the specified memory location	none
STY	STore Y register	Stores the value in the Y register at the specified memory location	none
TXS	Transfer X to Stack pointer	Transfers the value in the X register to the stack pointer. Note the stack is always between $0100 and $01FF, so this affects only the low byte of the stack address	none
TSX	Transfer Stack pointer to X	Transfers the low byte of the stack pointer to the X register	none
PHA	PusH Accumulator	Pushes the value in A onto the stack and then decrements the value in the stack pointer by 1. Note that on the 6502, the stack grows downwards	none
PLA	PuLl Accumulator	Increments the stack pointer by 1 and transfers the value at that address to the accumulator. Note that on the 6502, the stack grows downwards	none
PHP	PusH Processor status	Pushes the processor status onto the stack and decrements the stack pointer	none
PLP	PuLl Processor status	Increments the stack pointer by one and pulls the value into the processor status register	none
\.


--
-- Name: facts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: lannri01
--

SELECT pg_catalog.setval('public.facts_id_seq', 11, true);


--
-- Name: facts facts_pkey; Type: CONSTRAINT; Schema: public; Owner: lannri01
--

ALTER TABLE ONLY public.facts
    ADD CONSTRAINT facts_pkey PRIMARY KEY (id);


--
-- Name: instructions_general menonic_key; Type: CONSTRAINT; Schema: public; Owner: lannri01
--

ALTER TABLE ONLY public.instructions_general
    ADD CONSTRAINT menonic_key PRIMARY KEY (mnemonic);


--
-- PostgreSQL database dump complete
--

